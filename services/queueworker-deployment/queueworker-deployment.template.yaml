apiVersion: apps/v1
kind: Deployment
metadata:
  name: queueworker-deployment
  namespace: darklang
  annotations:
    kubernetes.io/change-cause: "{ARG:CHANGE_CAUSE}"

spec:
  revisionHistoryLimit: 10
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0

  selector:
    matchLabels:
      app: queueworker-app
  template:
    metadata:
      labels:
        app: queueworker-app
        dark-executor: "true"
      annotations:
        # We use EmptyDir to allow read-only pods, but they need this annotation to scale down
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      # ---------------------
      # Pod-level security
      # ---------------------
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true # https://docs.bridgecrew.io/docs/bc_k8s_22
        runAsUser: 25432 # https://stackoverflow.com/questions/49720308
      hostPID: false
      automountServiceAccountToken: false # https://docs.bridgecrew.io/docs/bc_k8s_35

      ###################
      # Container definitions
      ###################
      containers:

        ###################
        # Main container
        ###################
        - name: queueworker-ctr
          image: "gcr.io/balmy-ground-195100/gcp-fsharp-queueworker:{IMAGEID:gcp-fsharp-queueworker}"
          # ---------------------
          # Security - https://docs.bridgecrew.io/docs
          # ---------------------
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW # https://docs.bridgecrew.io/docs/bc_k8s_27
                - ALL # https://docs.bridgecrew.io/docs/bc_k8s_34
            privileged: false
            readOnlyRootFilesystem: true # https://docs.bridgecrew.io/docs/bc_k8s_21
            runAsNonRoot: true # https://docs.bridgecrew.io/docs/bc_k8s_22
            runAsUser: 1000 # https://stackoverflow.com/questions/49720308
          volumeMounts:
            - mountPath: /home/dark/gcp-rundir # security
              name: rundir

          # ---------------------
          # Resource limits
          # ---------------------
          resources:
            requests:
              memory: "4000Mi"
              cpu: "1.5"
            limits:
              memory: "8000Mi"

          # ---------------------
          # Lifecycles probes
          # ---------------------
          # lifecycle:
          #   preStop:
          #     We implement the SIGTERM handler instead (even if we used preStop we'd
          #     still need to check how SIGTERM works so may as well simplify it to one
          #     concept)
          startupProbe: # has it started? Allows other probes
            httpGet:
              path: /k8s/startupProbe
              port: 13002
            failureThreshold: 24 # kill container after 2 minutes (24x5s checks)
            timeoutSeconds: 10
            periodSeconds: 5
          readinessProbe: # can it serve http requests?
            httpGet:
              path: /k8s/readinessProbe
              port: 13002
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 3
          livenessProbe: # is it still alive?
            httpGet:
              path: /k8s/livenessProbe
              port: 13002
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 3 # kill container after 30 seconds (3x10s checks)

          # ---------------------
          # Environment
          # ---------------------
          envFrom:
            - configMapRef:
                name: "{VERSIONED-CONFIGMAP:app-config}"
          env:
            # rollbar
            - name: DARK_CONFIG_ROLLBAR_POST_SERVER_ITEM
              valueFrom:
                secretKeyRef:
                  name: rollbar-account-credentials
                  key: post_token
            # honeycomb
            - name: DARK_CONFIG_LAUNCHDARKLY_SDK_API_KEY
              valueFrom:
                secretKeyRef:
                  name: launchdarkly-account-credentials
                  key: key
            # pusher
            - name: DARK_CONFIG_PUSHER_APP_ID
              valueFrom:
                secretKeyRef:
                  name: credentials-pusher
                  key: app_id
            - name: DARK_CONFIG_PUSHER_KEY
              valueFrom:
                secretKeyRef:
                  name: credentials-pusher
                  key: key
            - name: DARK_CONFIG_PUSHER_SECRET
              valueFrom:
                secretKeyRef:
                  name: credentials-pusher
                  key: secret
            - name: DARK_CONFIG_PUSHER_CLUSTER
              valueFrom:
                secretKeyRef:
                  name: credentials-pusher
                  key: cluster
            # database (sql server in the same pod)
            - name: DARK_CONFIG_DB_HOST
              value: 127.0.0.1
            - name: DARK_CONFIG_DB_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: DARK_CONFIG_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
            # honeycomb
            - name: DARK_CONFIG_HONEYCOMB_API_KEY
              valueFrom:
                secretKeyRef:
                  name: honeycomb-account-credentials
                  key: api-key
            # PubSub - service account JSON file
            - name: DARK_CONFIG_QUEUE_PUBSUB_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: credentials-queue-pubsub
                  key: key.json
            # Cloud Storage - service account JSON file
            - name: DARK_CONFIG_TRACE_STORAGE_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: credentials-traces-cloud-storage
                  key: key.json


        #########################
        # Cloudsql proxy container
        # To connect to postgres from kubernetes, we need to add a proxy. See
        # https://cloud.google.com/sql/docs/postgres/connect-kubernetes-engine.
        # Note in particular that we needed to create a service account and a
        # set of GKE secrets, listed below, to manage this.
        #########################
        - name: cloudsql-proxy
          image: "gcr.io/cloudsql-docker/gce-proxy:1.28.0@sha256:69880f1a8c3ac450f9cb083b91adb2d881ef71af3928ebf6b88b8933314f118a"
          command:
            - "/cloud_sql_proxy"
            - "-instances={BUILTIN:CLOUDSQL_INSTANCE_NAME}=tcp:5432"
            - "-credential_file=/secrets/cloudsql/credentials.json"
            - "-term_timeout=30s"
            - "-structured_logs"
            - "-verbose"
            - "-use_http_health_check"
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true

          # --------------------
          # Security
          # --------------------
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW # https://docs.bridgecrew.io/docs/bc_k8s_27
                - ALL # https://docs.bridgecrew.io/docs/bc_k8s_34
            privileged: false
            readOnlyRootFilesystem: true # https://docs.bridgecrew.io/docs/bc_k8s_21
            runAsNonRoot: true # https://docs.bridgecrew.io/docs/bc_k8s_22
            runAsUser: 25432 # https://stackoverflow.com/questions/49720308

          # ---------------------
          # Resource limits
          # ---------------------
          resources:
            requests:
              memory: "20Mi"
              cpu: "10m"
            limits:
              memory: "500Mi"

          # ---------------------
          # Lifecycle probes
          # ---------------------
          # from https://github.com/GoogleCloudPlatform/cloudsql-proxy/blob/9e4bf2c689eaa117e0f89c7ac5d181bfcc03a849/examples/k8s-health-check/proxy_with_http_health_check.yaml#L91
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8090
            initialDelaySeconds: 0
            periodSeconds: 60
            timeoutSeconds: 30
            # If periodSeconds = 60, 5 tries will result in five minutes of
            # checks. The proxy starts to refresh a certificate five minutes
            # before its expiration. If those five minutes lapse without a
            # successful refresh, the liveness probe will fail and the pod will be
            # restarted.
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8090
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 1
          startupProbe:
            httpGet:
              path: /startup
              port: 8090
            periodSeconds: 1
            timeoutSeconds: 5
            failureThreshold: 20


      # ---------------------
      # Pod volume definitions
      # ---------------------
      volumes:
        # Cloud sql
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials

        # Main container
        # to allow readOnlyRootFilesystem
        - name: rundir
          emptyDir: { }
